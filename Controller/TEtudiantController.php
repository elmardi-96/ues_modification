<?php


namespace AppBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use AppBundle\Entity\AcModule;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Knp\Snappy\Pdf;
use Knp\Bundle\SnappyBundle\Snappy\Response\PdfResponse;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use AppBundle\Entity\TEtudiant;
use AppBundle\Entity\TEtudiantInfo;
use AppBundle\Form\TEtudiantType;
use AppBundle\Service\FileUploader;
use Symfony\Component\HttpFoundation\File\File;
use DateTime;
use DateInterval;

/**
 * Etudiant controller.
 *
 * @Route("etudiant")
 */
class TEtudiantController extends Controller {

    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Lists all etudiant entities.
     *
     * @Route("/", name="etudiant_index")
     * 
     */
    public function indexAction(Request $request, FileUploader $fileUploader) {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Informations", "etudiant_index");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");

        $tab_1 = "active";
        $tab_2 = "";


        $user = $this->getUser();
//        if (is_null($user->getFirstLogin())) {
//            return $this->redirectToRoute('fos_user_change_password');
//        }

        $repository = $this->getDoctrine()->getRepository('AppBundle:User');
        $user = $repository->findOneById($user->getId());





        $etudiant = new TEtudiant();
        $form = $this->createForm(TEtudiantType::class, $etudiant);
        $form->handleRequest($request);



        if ($form->isSubmitted() && $form->isValid()) {


            $file = $etudiant->getUrlImage();
            $fileName = $fileUploader->upload($file);
            $etudiant->setUrlImage($fileName);


            $em = $this->getDoctrine()->getManager();
            $etu = $em->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant());



            $etu->setUrlImage($fileName);
            $em->flush();
        } elseif ($form->isSubmitted() && !$form->isValid()) {
            $tab_1 = "";
            $tab_2 = "active";
        }

//dump($user);
        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnnee($user->getEtudiant()->getId());

            // dump($user->getEtudiant()->getId()); die();
        $em = $this->getDoctrine()->getManager();
        $dql = "SELECT a FROM AppBundle:Notification a where a.etablissement is null or  a.promotion = " . $inscription->getPromotion()->getId() . " or a.formation = " . $inscription->getPromotion()->getFormation()->getId() . "or  a.etablissement = " . $inscription->getPromotion()->getFormation()->getEtablissement()->getId() . " order by a.id desc ";


        $query = $em->createQuery($dql);

        $paginator = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
                $query, /* query NOT result */
                $request->query->getInt('page', 1)/* page number */,
                5/* limit per page */
        );


        //  dump($pagination); die();

            $userx = $this->getUser();
             $emx   = $this->getDoctrine()->getManager();
             $etux  = $emx->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant());
             
             $etuInfo  = $emx->getRepository('AppBundle:TEtudiantInfo') ->createQueryBuilder('c')
                                                                        ->where("c.code ='".$etux->getCode()."'")
                                                                        ->getQuery()
                                                                        ->getResult();
             if($etuInfo==true && $etuInfo[0]->getInscriptionValide()==2){
                // if($etuInfo->getInscriptionValide()==2){
             return $this->render('etudiant/index.html.twig', array('pagination' => $pagination, 'user' => $user, 'form' => $form->createView(), 'tab_1' => $tab_1, 'tab_2' => $tab_2,'x1' => $inscription->getReserve() ));
                /* }else{
                   return $this->render('etudiant/testFormv.html.twig');
                 }*/
                     
                 }else{
                     return $this->redirectToRoute('infoForm');
                    //return $this->render('etudiant/testForm.html.twig');
             }  
             
        
    }
    /**
     * Formulaire Information Etudiant(e).
     *
     * @Route("/infoform", name="infoForm")
     * 
     */
    public function infoForm(Request $request, FileUploader $fileUploader) {
             $userx = $this->getUser();
             $emx   = $this->getDoctrine()->getManager();
             $etux  = $emx->getRepository('AppBundle:TEtudiant')->find($userx->getEtudiant());
             
             $etuInfo  = $emx->getRepository('AppBundle:TEtudiantInfo') ->createQueryBuilder('c')
                                                                        ->where("c.code ='".$etux->getCode()."'")
                                                                        ->getQuery()
                                                                        ->getResult();
                                   if($etuInfo==true && $etuInfo[0]->getInscriptionValide()==1){
        return $this->render('etudiant/testFormv.html.twig',array('nom' => $etuInfo[0]->getNom(),'prenom' => $etuInfo[0]->getPrenom(),'nomar' => $etuInfo[0]->getNomAr(),'prenomar' => $etuInfo[0]->getPrenomAr(),
                                                                  'sexe'=>$etuInfo[0]->getSexe(),'DN'=>$etuInfo[0]->getDateNaissance(),'LN'=>$etuInfo[0]->getLieuNaissance(),'CIN'=>$etuInfo[0]->getCin(),
                                                                  'stFam'=>$etuInfo[0]->getStFamille(),'ville'=>$etuInfo[0]->getVille(),'nat'=>$etuInfo[0]->getNationalite(),'tel3'=>$etuInfo[0]->getTel3(),'passport'=>$etuInfo[0]->getPasseport(),
                                                                  'mail1'=>$etuInfo[0]->getMail1(),'tel1'=>$etuInfo[0]->getTel1(),'mail2'=>$etuInfo[0]->getMail2(),'tel2'=>$etuInfo[0]->getTel2(),'adresse'=>$etuInfo[0]->getAdresse(),
                                                                  'nomP'=>$etuInfo[0]->getNomP(),'prenomP'=>$etuInfo[0]->getPrenomP(),'natP'=>$etuInfo[0]->getNationaliteP(),'professionP'=>$etuInfo[0]->getProfessionP(),
                                                                  'employeP'=>$etuInfo[0]->getEmployeP(),'telP'=>$etuInfo[0]->getTelP(),'mailP'=>$etuInfo[0]->getMailP(),'stFamParent'=>$etuInfo[0]->getStFamilleParent(),
                                                                  'nomM'=>$etuInfo[0]->getNomM(),'prenomM'=>$etuInfo[0]->getPrenomM(),'nationaliteM'=>$etuInfo[0]->getNationaliteM(),'professionM'=>$etuInfo[0]->getProfessionM(),
                                                                  'employeM'=>$etuInfo[0]->getEmployeM(),'telM'=>$etuInfo[0]->getTelM(),'mailM'=>$etuInfo[0]->getMailM(),'cne'=>$etuInfo[0]->getCne(),
                                                                  'filiere'=>$etuInfo[0]->getIdFiliere(),'etablissement'=>$etuInfo[0]->getEtablissement(),'moyenneBac'=>$etuInfo[0]->getMoyenneBac(),'academie'=>$etuInfo[0]->getIdAcademie(),
                                                                  'typeBac'=>$etuInfo[0]->getIdTypeBac(),'anneeBac'=>$etuInfo[0]->getAnneeBac(),'nombreFreres'=>$etuInfo[0]->getNombreFreres()));                                   }else if($etuInfo==true && $etuInfo[0]->getInscriptionValide()==2){
                                         return $this->redirectToRoute('etudiant_index');
                                   }else if($etuInfo==true && $etuInfo[0]->getInscriptionValide()==0){
                                       return $this->render('etudiant/testForm0.html.twig',array('nom' => $etuInfo[0]->getNom(),'prenom' => $etuInfo[0]->getPrenom(),'nomar' => $etuInfo[0]->getNomAr(),'prenomar' => $etuInfo[0]->getPrenomAr(),
                                                                  'sexe'=>$etuInfo[0]->getSexe(),'DN'=>$etuInfo[0]->getDateNaissance(),'LN'=>$etuInfo[0]->getLieuNaissance(),'CIN'=>$etuInfo[0]->getCin(),
                                                                  'stFam'=>$etuInfo[0]->getStFamille(),'ville'=>$etuInfo[0]->getVille(),'nat'=>$etuInfo[0]->getNationalite(),'tel3'=>$etuInfo[0]->getTel3(),'passport'=>$etuInfo[0]->getPasseport(),
                                                                  'mail1'=>$etuInfo[0]->getMail1(),'tel1'=>$etuInfo[0]->getTel1(),'mail2'=>$etuInfo[0]->getMail2(),'tel2'=>$etuInfo[0]->getTel2(),'adresse'=>$etuInfo[0]->getAdresse(),
                                                                  'nomP'=>$etuInfo[0]->getNomP(),'prenomP'=>$etuInfo[0]->getPrenomP(),'natP'=>$etuInfo[0]->getNationaliteP(),'professionP'=>$etuInfo[0]->getProfessionP(),
                                                                  'employeP'=>$etuInfo[0]->getEmployeP(),'telP'=>$etuInfo[0]->getTelP(),'mailP'=>$etuInfo[0]->getMailP(),'stFamParent'=>$etuInfo[0]->getStFamilleParent(),
                                                                  'nomM'=>$etuInfo[0]->getNomM(),'prenomM'=>$etuInfo[0]->getPrenomM(),'nationaliteM'=>$etuInfo[0]->getNationaliteM(),'professionM'=>$etuInfo[0]->getProfessionM(),
                                                                  'employeM'=>$etuInfo[0]->getEmployeM(),'telM'=>$etuInfo[0]->getTelM(),'mailM'=>$etuInfo[0]->getMailM(),'cne'=>$etuInfo[0]->getCne(),
                                                                  'filiere'=>$etuInfo[0]->getIdFiliere(),'etablissement'=>$etuInfo[0]->getEtablissement(),'moyenneBac'=>$etuInfo[0]->getMoyenneBac(),'academie'=>$etuInfo[0]->getIdAcademie(),
                                                                  'typeBac'=>$etuInfo[0]->getIdTypeBac(),'anneeBac'=>$etuInfo[0]->getAnneeBac(),'nombreFreres'=>$etuInfo[0]->getNombreFreres()));
                                   }else if($etuInfo==true && $etuInfo[0]->getInscriptionValide()==2){
                                            return $this->redirectToRoute('etudiant_index');
                                   }else if($etuInfo==false){
                                        return $this->render('etudiant/testForm.html.twig');
                                         }
    }
    
/* here was the code testformv */    

    /**
     * Formulaire Information Etudiant.
     *
     * @Route("/testform", name="testForm")
     * 
     */
    public function testForm(Request $request, FileUploader $fileUploader) {
        
             $nom           = $request->request->get('nom');
             $prenom        = $request->request->get('prenom');        
             $nomAr         = $request->request->get('nomAr');   
             $prenomAr      = $request->request->get('prenomAr');   
             $dateN         = $request->request->get('dateN');   
             $sexe          = $request->request->get('sexe');   
             $cin           = $request->request->get('cin');
             $lieuN         = $request->request->get('lieuN');
             $situationF    = $request->request->get('situationF');
             $ville         = $request->request->get('ville');
             $nat           = $request->request->get('nat');
             $tel2          = $request->request->get('tel2');
             $passP         = $request->request->get('passP');
             $mail          = $request->request->get('mail');
             $tel           = $request->request->get('tel');
             $mail2         = $request->request->get('mail2');
             $tel3          = $request->request->get('tel3');
             $addresse      = $request->request->get('addresse');
             $nomP          = $request->request->get('nomP');
             $prenomP       = $request->request->get('prenomP');
             $natP          = $request->request->get('natP');
             $proffP        = $request->request->get('proffP');
             $etabP         = $request->request->get('etabP');
             $telP          = $request->request->get('telP');
             $mailP         = $request->request->get('mailP');
             $situationFP   = $request->request->get('situationFP');
           //  $salaireP      = $request->request->get('salaireP');
             $nomM          = $request->request->get('nomM');
             $prenomM       = $request->request->get('prenomM');
             $natM          = $request->request->get('natM');
             $proffM        = $request->request->get('proffM');
             $etabM         = $request->request->get('etabM');
             $telM          = $request->request->get('telM');
             $mailM         = $request->request->get('mailM');
            // $salaireM      = $request->request->get('salaireM');
             $cne           = $request->request->get('cne');
             $acad          = $request->request->get('acad');
             $fil           = $request->request->get('fil');
             $typeB         = $request->request->get('typeB');
             $etab          = $request->request->get('etab');
             $annB          = $request->request->get('annB');
             $moyB          = $request->request->get('moyB');
             $nbrF          = $request->request->get('nbrF');
             $dateNx = new \DateTime($dateN);    
             $TodayDate= new \DateTime();

              
             $user = $this->getUser();
             $em   = $this->getDoctrine()->getManager();
             $etu  = $em->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant());
             $etu1 = new TEtudiantInfo();
             $etu1->setCode($etu->getCode());
             $etu1->setInscriptionValide(1);
             $etu1->setNom($nom);
             $etu1->setPrenom($prenom);
             $etu1->setNomAr($nomAr);
             $etu1->setPrenomAr($prenomAr);
             $etu1->setDateNaissance($dateNx);
             $etu1->setSexe($sexe);
             $etu1->setCin($cin);
             $etu1->setLieuNaissance($lieuN);
             $etu1->setStFamille($situationF);
             $etu1->setVille($ville);
             $etu1->setNationalite($nat);
             $etu1->setTel2($tel2);
             $etu1->setPasseport($passP);
             $etu1->setMail1($mail);
             $etu1->setTel1($tel);
             $etu1->setMail2($mail2);
             $etu1->setTel3($tel3);
             $etu1->setAdresse($addresse);
             $etu1->setNomP($nomP);
             $etu1->setPrenomP($prenomP);
             $etu1->setNationaliteP($natP);
             $etu1->setProfessionP($proffP);
             $etu1->setEmployeP($etabP);
             $etu1->setTelP($telP);
             $etu1->setMailP($mailP);
             $etu1->setStFamilleParent($situationFP);
             //$etu1->setSalaireP($salaireP);
             $etu1->setNomM($nomM);
             $etu1->setPrenomM($prenomM);
             $etu1->setNationaliteM($natM);
             $etu1->setProfessionM($proffM);
             $etu1->setEmployeM($etabM);
             $etu1->setTelM($telM);
             $etu1->setMailM($mailM);
             //$etu1->setSalaireM($salaireM);
             $etu1->setCne($cne);
             $etu1->setIdAcademie($acad);
             $etu1->setIdFiliere($fil);
             $etu1->setIdTypeBac($typeB);
             $etu1->setEtablissement($etab);
             $etu1->setAnneeBac($annB);
             $etu1->setMoyenneBac($moyB);
             $etu1->setNombreFreres($nbrF);
             $etu1->setNombreEnfants($nbrF);
             $etu1->setDateCreation($TodayDate);
             $etu1->setUtilisateur($user->getUserName());
             $em->persist($etu1);
             $em->flush();
                 return new Response('good');
                
            }

    /**
     * Formulaire Information Etudiant.
     *
     * @Route("/testformv", name="testFormv")
     * 
     */
    public function testFormv(Request $request, FileUploader $fileUploader) {
        
             $nom           = $request->request->get('nom');
             $prenom        = $request->request->get('prenom');        
             $nomAr         = $request->request->get('nomAr');   
             $prenomAr      = $request->request->get('prenomAr');   
             $dateN         = $request->request->get('dateN');   
             $sexe          = $request->request->get('sexe');   
             $cin           = $request->request->get('cin');
             $lieuN         = $request->request->get('lieuN');
             $situationF    = $request->request->get('situationF');
             $ville         = $request->request->get('ville');
             $nat           = $request->request->get('nat');
             $tel2          = $request->request->get('tel2');
             $passP         = $request->request->get('passP');
             $mail          = $request->request->get('mail');
             $tel           = $request->request->get('tel');
             $mail2         = $request->request->get('mail2');
             $tel3          = $request->request->get('tel3');
             $addresse      = $request->request->get('addresse');
             $nomP          = $request->request->get('nomP');
             $prenomP       = $request->request->get('prenomP');
             $natP          = $request->request->get('natP');
             $proffP        = $request->request->get('proffP');
             $etabP         = $request->request->get('etabP');
             $telP          = $request->request->get('telP');
             $mailP         = $request->request->get('mailP');
             $situationFP   = $request->request->get('situationFP');
           //  $salaireP      = $request->request->get('salaireP');
             $nomM          = $request->request->get('nomM');
             $prenomM       = $request->request->get('prenomM');
             $natM          = $request->request->get('natM');
             $proffM        = $request->request->get('proffM');
             $etabM         = $request->request->get('etabM');
             $telM          = $request->request->get('telM');
             $mailM         = $request->request->get('mailM');
            // $salaireM      = $request->request->get('salaireM');
             $cne           = $request->request->get('cne');
             $acad          = $request->request->get('acad');
             $fil           = $request->request->get('fil');
             $typeB         = $request->request->get('typeB');
             $etab          = $request->request->get('etab');
             $annB          = $request->request->get('annB');
             $moyB          = $request->request->get('moyB');
             $nbrF          = $request->request->get('nbrF');
             $dateNx = new \DateTime($dateN);    
             $TodayDate= new \DateTime();

              
             $user = $this->getUser();
             $em   = $this->getDoctrine()->getManager();
             $etu  = $em->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant());
             
             $etu1  = $em->getRepository('AppBundle:TEtudiantInfo') ->createQueryBuilder('c')
                                                                        ->where("c.code ='".$etu->getCode()."'")
                                                                        ->getQuery()
                                                                        ->getResult();             
             $etu1[0]->setInscriptionValide(1);
             $etu1[0]->setNom($nom);
             $etu1[0]->setPrenom($prenom);
             $etu1[0]->setNomAr($nomAr);
             $etu1[0]->setPrenomAr($prenomAr);
             $etu1[0]->setDateNaissance($dateNx);
             $etu1[0]->setSexe($sexe);
             $etu1[0]->setCin($cin);
             $etu1[0]->setLieuNaissance($lieuN);
             $etu1[0]->setStFamille($situationF);
             $etu1[0]->setVille($ville);
             $etu1[0]->setNationalite($nat);
             $etu1[0]->setTel2($tel2);
             $etu1[0]->setPasseport($passP);
             $etu1[0]->setMail1($mail);
             $etu1[0]->setTel1($tel);
             $etu1[0]->setMail2($mail2);
             $etu1[0]->setTel3($tel3);
             $etu1[0]->setAdresse($addresse);
             $etu1[0]->setNomP($nomP);
             $etu1[0]->setPrenomP($prenomP);
             $etu1[0]->setNationaliteP($natP);
             $etu1[0]->setProfessionP($proffP);
             $etu1[0]->setEmployeP($etabP);
             $etu1[0]->setTelP($telP);
             $etu1[0]->setMailP($mailP);
             $etu1[0]->setStFamilleParent($situationFP);
             //$et[0]u1->setSalaireP($salaireP);
             $etu1[0]->setNomM($nomM);
             $etu1[0]->setPrenomM($prenomM);
             $etu1[0]->setNationaliteM($natM);
             $etu1[0]->setProfessionM($proffM);
             $etu1[0]->setEmployeM($etabM);
             $etu1[0]->setTelM($telM);
             $etu1[0]->setMailM($mailM);
             //$et[0]u1->setSalaireM($salaireM);
             $etu1[0]->setCne($cne);
             $etu1[0]->setIdAcademie($acad);
             $etu1[0]->setIdFiliere($fil);
             $etu1[0]->setIdTypeBac($typeB);
             $etu1[0]->setEtablissement($etab);
             $etu1[0]->setAnneeBac($annB);
             $etu1[0]->setMoyenneBac($moyB);
             $etu1[0]->setNombreFreres($nbrF);
             $etu1[0]->setNombreEnfants($nbrF);
             $etu1[0]->setDateCreation($TodayDate);
             $etu1[0]->setUtilisateur($user->getUserName());
             $em->persist($etu1[0]);
             $em->flush();
                 return new Response('good');
                
            }
            
    /**
     * Displays service informations
     *
     * @Route("/programme/", name="etudiant_programme")
     * 
     */
    public function programmeAction() {
        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Programmes", "etudiant_programme");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");




        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }

        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnneeByIDAndCodeAdmission($user->getEtudiant()->getId(), $user->getUsername());

        //     dump($inscription); 
        $result = 0;
        if (empty($inscription)) {
            $result = 0;
        } else {
            $result = 1;
        }



        $em = $this->getDoctrine()->getManager();
        $formation = $em->getRepository('AppBundle:AcFormation')->find($inscription->getPromotion()->getFormation());



        $array_semestres = array();
        foreach ($formation->getPromotions() as $key => $promotion) {
            foreach ($promotion->getSemestres() as $key2 => $semestre) {
                $array_semestres[] = $semestre->getCode();
            }
        }

        //  dump($array_semestres);  die();


        $programme = $em->getRepository('AppBundle:PrProgrammation')->findBy(['idSemestre' => $array_semestres]);
        // dump($inf); 
        $s = array();
        $m = array();
        $e = array();
        foreach ($programme as $key => $value) {
            $s[] = $value->getIdSemestre();
            $m[] = $value->getIdModule();
            $e[] = $value->getIdelement();
        }

//        dump($formation); 
//        
//        dump(array_unique($s));
//        dump($inscription);
//        die();

        return $this->render('etudiant/programme.html.twig', array('inscription' => $inscription, 'result' => $result, 'formation' => $formation, 'semestres_programme' => array_unique($s), 'modules_programme' => array_unique($m), 'elements_programme' => array_unique($e)));
    }

    /**
     * Displays examen informations
     *
     * @Route("/programme/pedagogique/{code_element}", options = { "expose" = true } ,name="etudiant_programme_pedagogique")
     * 
     */
    public function ProgrammePedagoqiqueAction(Request $request, $code_element) {

        $repository = $this->getDoctrine()->getRepository('AppBundle:PrProgrammation');
        $programme = $repository->findBy(array('idElement' => $code_element), array('volume' => 'DESC'));

        $repository = $this->getDoctrine()->getRepository('AppBundle:AcElement');
        $element = $repository->findOneByCode($code_element);

/* multiple cours 16/04/2020 18:48 */
 $sql=" SELECT * FROM `cours` where `code_cours`='".$code_element."'";

                 $stmt = $this->getDoctrine()->getConnection()->prepare($sql);
                 $stmt->execute();
                 $cours = $stmt->fetchAll();
/* multiple cours */

//        $repository = $this->getDoctrine()->getRepository('AppBundle:AcAnnee');
//        $annee = $repository->findOneByCode($code_annee);

        return $this->render('etudiant/programme_pedagogique.html.twig', array('programme' => $programme,
                    'element' => $element,
                    'cours' => $cours
//                    'annee' => $annee
        ));
    }
    
    
    /**
     * Displays service informations
     *
     * @Route("/video/", name="video")
     * 
     */
    public function videoAction() {
        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Videos", "etudiant_programme");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");




        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }

        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnneeByIDAndCodeAdmission($user->getEtudiant()->getId(), 
        $user->getUsername());

        //     dump($inscription); 
        $result = 0;
        if (empty($inscription)) {
            $result = 0;
        } else {
            $result = 1;
        }



        $em = $this->getDoctrine()->getManager();
        $formation = $em->getRepository('AppBundle:AcFormation')->find($inscription->getPromotion()->getFormation());



        $array_semestres = array();
        foreach ($formation->getPromotions() as $key => $promotion) {
            foreach ($promotion->getSemestres() as $key2 => $semestre) {
                $array_semestres[] = $semestre->getCode();
            }
        }

        //  dump($array_semestres);  die();


        $programme = $em->getRepository('AppBundle:PrProgrammation')->findBy(['idSemestre' => $array_semestres]);
        // dump($inf); 
        $s = array();
        $m = array();
        $e = array();
        foreach ($programme as $key => $value) {
            $s[] = $value->getIdSemestre();
            $m[] = $value->getIdModule();
            $e[] = $value->getIdelement();
        }

//        dump($formation); 
//        
//        dump(array_unique($s));
//        dump($inscription);
//        die();

        return $this->render('etudiant/video.html.twig', array('inscription' => $inscription, 
        'result' => $result, 'formation' => $formation, 'semestres_programme' => array_unique($s), 
        'modules_programme' => array_unique($m), 'elements_programme' => array_unique($e)));
    }

    

    /**
     * Displays videos informations
     *
     * @Route("/video/information", options = { "expose" = true } ,name="etudiant_video_information")
     * 
     */
    public function videoInformationAction(Request $request) {

        // $req = $request->getContent();
        $data = $request->request->get('choices');
        // dd($req);
        return $this->render('etudiant/video_pedagogique.html.twig', array('data' => $data, ));
    }



    /**
     *
     *
     * @Route("/releve/semestre/{ac_semestre_id}", name="etudiant_releve_semestre")
     * 
     */
    public function releveSemestreAction($ac_semestre_id) {
//        
//         $repository2 = $this->getDoctrine()->getRepository('AppBundle:ExMnotes');
//        $semestres = $repository2->findBy(array('promotion' => $inscription->getPromotion()->getId(), 'active' => 1));


        $em = $this->getDoctrine()->getManager();
        $data = $em->getRepository('AppBundle:TEtudiant')->GetNotesBySemestreAndEtudiant($ac_semestre_id);



//   $html = $this->renderView('etudiant/releve_semestre.html.twig', array(
//    'some'  => ""
//));

        $snappy = $this->get('knp_snappy.pdf');

//$snappy->setOption('page-width', 100);
//$snappy->setOption('page-height', 187);
//$snappy->setOption('header-center', 'this is my header ');
//$snappy->setOption('footer-left', 'this is my footer');
//$snappy->setOption('footer-right', 'Page [page] of [toPage]');
//$snappy->setOption('margin-top', 20);
//$snappy->setOption('orientation', 'Landscape');
//$snappy->setOption('header-html', 'http://www.pikemere.co.uk/testerpdf.html');
        $html = $this->renderView('etudiant/releve_semestre.html.twig', array(
            'data' => $data
        ));

        $filename = 'myFirstSnappyPDF';

        return new Response(
                $snappy->getOutputFromHtml($html, array(
                    'footer-spacing' => '0',
                )), 200, array(
            'Content-Type' => 'application/pdf',
            'Content-Disposition' => 'inline; filename="' . $filename . '.pdf"'
                )
        );



        //   return $this->render('etudiant/releve_semestre.html.twig', array('inscription' => ''));
    }

    /**
     * Creates a new etudiant entity.
     *
     * @Route("/new", name="etudiant_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request) {
        $etudiant = new Etudiant();
        $form = $this->createForm('AppBundle\Form\EtudiantType', $etudiant);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($etudiant);
            $em->flush();

            return $this->redirectToRoute('etudiant_show', array('id' => $etudiant->getId()));
        }

        return $this->render('etudiant/new.html.twig', array(
                    'etudiant' => $etudiant,
                    'form' => $form->createView(),
        ));
    }

    /**
     * Creates a form to delete a etudiant entity.
     *
     * @param Etudiant $etudiant The etudiant entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Etudiant $etudiant) {
        return $this->createFormBuilder()
                        ->setAction($this->generateUrl('etudiant_delete', array('id' => $etudiant->getId())))
                        ->setMethod('DELETE')
                        ->getForm()
        ;
    }

    /**
     * Displays administration informations
     *
     * @Route("/administratif/", name="etudiant_administratif")
     * 
     */
    public function administrationAction() {
        return $this->render('etudiant/administratif.html.twig');
    }

    /**
     * Displays examen informations
     *
     * @Route("/examen/", name="etudiant_examen")
     * 
     */
    public function examenAction() {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Notes", "etudiant_examen");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");


        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }

//        $repository = $this->getDoctrine()->getRepository('AppBundle:TEtudiant');
//        $etudiant = $repository->findOneId($user->getId());


        $em = $this->getDoctrine()->getManager();
        $infos = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnneeByIDAndCodeAdmission($user->getEtudiant()->getId(), $user->getUserName());


        $repository = $this->getDoctrine()->getRepository('AppBundle:TInscription');
        $inscription = $repository->findByAdmission($infos->getAdmission());

        // dump($inscription); die();

             $userx = $this->getUser();
             $emx   = $this->getDoctrine()->getManager();
             $etux  = $emx->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant());
             
             $etuInfo  = $emx->getRepository('AppBundle:TEtudiantInfo') ->createQueryBuilder('c')
                                                                        ->where("c.code ='".$etux->getCode()."'")
                                                                        ->getQuery()
                                                                        ->getResult();
             if($etuInfo==true  && $etuInfo[0]->getInscriptionValide()==2/*or $user->getUserName()!='ADM-FMA_MG00003920'*/){
        return $this->render('etudiant/examen.html.twig', array('inscription' => $inscription));
             }else{
                     return $this->redirectToRoute('infoForm');
                    //return $this->render('etudiant/testForm.html.twig');
             }  
    }

    /**
     * Displays disicpline informations
     *
     * @Route("/disicpline/", name="etudiant_disicpline")
     * 
     */
    public function disicplineAction() {
        return $this->render('etudiant/disicpline.html.twig');
    }

    /**
     * Displays service informations
     *
     * @Route("/service/", name="etudiant_service")
     * 
     */
    public function serviceAction() {
        return $this->render('etudiant/service.html.twig');
    }

    /**
     * Displays bibliotheque informations
     *
     * @Route("/bibliotheque/", name="etudiant_bibliotheque")
     * 
     */
    public function bibliothequeAction() {
        return $this->render('etudiant/bibliotheque.html.twig');
    }

    /**
     * Displays academique informations
     *
     * @Route("/academique/", name="etudiant_academique")
     * 
     * 
     */
    public function academiqueAction() {


        $session = new Session();


        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TInscription')->find($session->get('id_inscription'));
        //echo $inscription->getPromotion()->getId(); 


        $repository2 = $this->getDoctrine()->getRepository('AppBundle:AcSemestre');
        $semestres = $repository2->findBy(array('promotion' => $inscription->getPromotion()->getId(), 'active' => 1));

//       echo $semestres[0]->getId();
//      echo $semestres[1]->getId(); die();
        ////        
//        die();
//            $modules_s1 = $em->getRepository('AppBundle:TEtudiant')->GetModuleByIdInscriptionAndIdAnnee($semestres[0]->getId() );
//           
//            
//            echo($modules_s1); die();
//            
//            
//            $modules_s2 = $em->getRepository('AppBundle:TEtudiant')->GetModuleByIdInscriptionAndIdAnnee($semestres[1]->getId());
//        
//            var_dump($modules);

        $repository = $this->getDoctrine()->getRepository('AppBundle:AcModule');
        $lis_modules_s1 = $repository->findBy(array('semestre' => $semestres[0]->getId(), 'active' => 1));
        $lis_modules_s2 = $repository->findBy(array('semestre' => $semestres[1]->getId(), 'active' => 1));
        // var_dump($lis_modules);




        return $this->render('etudiant/academique.html.twig', array('lis_modules_s1' => $lis_modules_s1, 'lis_modules_s2' => $lis_modules_s2));
    }

    /**
     * Displays activite informations
     *
     * @Route("/activite/", name="etudiant_activite")
     * 
     */
    public function activiteAction() {

        $em = $this->getDoctrine()->getManager();
        $activites = $em->getRepository('AppBundle:Activite')->findAll();
        return $this->render('etudiant/activite.html.twig', array('activites' => $activites));
    }

    /**
     * Displays activite informations
     *
     * @Route("/choix_annee/", name="etudiant_choix_annee")
     * 
     */
    public function choixAnneeAction(Request $request) {

        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();




            $em = $this->getDoctrine()->getManager();
            $data = $em->getRepository('AppBundle:TEtudiant')->findOneByUser($user->getId());

            // echo $data->getId();die();



            $em = $this->getDoctrine()->getManager();
            $infos = $em->getRepository('AppBundle:TEtudiant')->GetIdAdmissionByIdEtudiant($data->getId());




            //  $annee = $em->getRepository('AppBundle:TEtudiant')->GetEtudiantAnneesByCodeAdmission($infos->getAdmission()->getId());
        }





        $form = $this->createFormBuilder()
                ->add('annee', EntityType::class, array(
                    'label' => false,
                    'attr' => array('class' => 'form-control'),
                    'class' => 'AppBundle:TEtudiant',
                    'choices' => $em->getRepository('AppBundle:TEtudiant')->GetEtudiantAnneesByCodeAdmission($infos->getAdmission()->getId()),
                    'choice_value' => 'id',
                    'choice_label' => 'designation',
                    'placeholder' => 'Choisissez une Année... '))
                ->getForm();


        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $session = new Session();

            $session->set('id_annee', $request->get('form')['annee']);
            $session->set('id_admission', $infos->getAdmission()->getId());

            return $this->redirectToRoute('etudiant_index');
        }


        return $this->render('etudiant/choix_annee.html.twig', array(
                    'form' => $form->createView(),
        ));
    }

    /**
     * @Route("/setting/{id}",options = { "expose" = true },
     *    
     *  name = "etudiant_setting",
     * )
     */
    public function settingAction(SessionInterface $session, $id) {
        /* $em = $this->getDoctrine()->getManager();
          $post = $this->getDoctrine()->getRepository('JizaUserBundle:Post')->findOneBy(array('title' => $text)); */

        // $rs = $response->setData(array('salah' => ''));
        //  if ($post) {
        //  }

        if ($id == 0) {
            $session->set('setting', "");
        } else {
            $session->set('setting', "open");
        }

//            $response = new JsonResponse();
//            $rs = $response->setData(array('id' => $id));
//     
        return "";
    }

    /**
     * Displays financier informations
     *
     * @Route("/financier/", name="etudiant_financier")
     * 
     */
    public function financierAction() {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Financier", "etudiant_financier");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");


        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }
//        $repository = $this->getDoctrine()->getRepository('AppBundle:TEtudiant');
//        $etudiant = $repository->findOneByUser($user->getId());
        $em = $this->getDoctrine()->getManager();
        $infos = $em->getRepository('AppBundle:TEtudiant')->GetIdAdmissionByIdEtudiant($user->getEtudiant()->getId());
        $repository = $this->getDoctrine()->getRepository('AppBundle:TInscription');
        $inscription = $repository->findByAdmission($infos->getAdmission());

        return $this->render('etudiant/financier.html.twig', array('inscription' => $inscription));
    }

    /**
     * Displays examen informations
     * 
     * @Route("/financier/situation/{id_annee}/{id_inscription}", options = { "expose" = true } ,name="etudiant_financier_situation")
     * 
     */
    public function financierSituationAction(Request $request, $id_annee, $id_inscription) {



        $repository = $this->getDoctrine()->getRepository('AppBundle:TOperationcab');
        $facture = $repository->findBy(array('annee' => $id_annee,
            'etudiant' => $this->getUser()->getEtudiant()->getId())
        );


        //dump($this->getUser()->getEtudiant()->getId()); die();

        return $this->render('etudiant/financier_situation.html.twig', array('factures' => $facture)
        );
    }

    /**
     * Displays deliberation informations
     *
     * @Route("/deliberation/", name="etudiant_deliberation")
     * 
     */
    public function deliberationAction() {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Délibérations", "etudiant_deliberation");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");


        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }


        $em = $this->getDoctrine()->getManager();
//        $etudiant = $em->getRepository('AppBundle:TEtudiant')->find($user->getEtudiant()->getId());
//        
//       // dump ($etudiant->getPrienscriptions()[0]->getadmissions()); die();
//        $admission_id = $etudiant->getPrienscriptions()[0]->getadmissions()[0]->getId();
//
//        
//        
//        $em = $this->getDoctrine()->getManager();
//        $infos = $em->getRepository('AppBundle:TEtudiant')->GetIdAdmissionByIdEtudiant($user->getEtudiant()->getId());






        $admission_id = $em->getRepository('AppBundle:TAdmission')->findOneByCode($this->container->get('security.token_storage')->getToken()->getUser()->getUsername());





        $repository = $this->getDoctrine()->getRepository('AppBundle:TInscription');
        $inscriptions = $repository->findByAdmission($admission_id);



        return $this->render('etudiant/deliberation.html.twig', array('inscription' => $inscriptions));
    }

    /**
     * Displays examen informations
     *
     * @Route("/noteepreuveexamen/{id_inscription}/{id}", options = { "expose" = true } ,name="etudiant_note_epreuve_examen")
     * 
     */
    public function GetNoteEpreuveExamenAction(Request $request, $id_inscription, $id) {

        $repository = $this->getDoctrine()->getRepository('AppBundle:ExGnotes');
        $note_epreuve = $repository->findOneBy(array('inscription' => $id_inscription, 'id' => $id));
        return $this->render('etudiant/note_epreuve_examen.html.twig', array('epreuve' => $note_epreuve));
    }

    /**
     * Displays semestre informations
     *
     * @Route("/notesemestre/{id_inscription}/{id}", options = { "expose" = true } ,name="etudiant_note_semestre")
     * 
     */
    public function GetNoteSemestreAction(Request $request, $id_inscription, $id) {
        $session = $request->getSession();
        $repository = $this->getDoctrine()->getRepository('AppBundle:ExSnotes');
        $note = $repository->findOneBy(array('inscription' => $id_inscription, 'semestre' => $id));
        return $this->render('etudiant/note_semestre.html.twig', array('note' => $note));
    }

    /**
     * Displays semestre informations
     *
     * @Route("/noteannee/{id_inscription}/{id}", options = { "expose" = true } ,name="etudiant_note_annee")
     * 
     */
    public function GetNoteAnneeAction(Request $request, $id_inscription, $id) {
        $session = $request->getSession();
        $repository = $this->getDoctrine()->getRepository('AppBundle:ExAnotes');
        $note = $repository->findOneBy(array('inscription' => $id_inscription, 'annee' => $id));
        //  dump($note);
        return $this->render('etudiant/note_annee.html.twig', array('note' => $note));
    }

    /**
     * Displays module informations
     *
     * @Route("/notemodule/{id_inscription}/{id}", options = { "expose" = true } ,name="etudiant_note_module")
     * 
     */
    public function GetNoteModuleAction(Request $request, $id_inscription, $id) {
        $session = $request->getSession();
        $repository = $this->getDoctrine()->getRepository('AppBundle:ExMnotes');
        $note = $repository->findOneBy(array('inscription' => $id_inscription, 'module' => $id));
        return $this->render('etudiant/note_module.html.twig', array('note' => $note));
    }

    /**
     * Displays module informations
     *
     * @Route("/noteelement/{id_inscription}/{id}", options = { "expose" = true } ,name="etudiant_note_element")
     * 
     */
    public function GetNoteElementAction(Request $request, $id_inscription, $id) {
        $session = $request->getSession();
        $repository = $this->getDoctrine()->getRepository('AppBundle:ExEnotes');
        $note = $repository->findOneBy(array('inscription' => $id_inscription, 'element' => $id));
        return $this->render('etudiant/note_element.html.twig', array('note' => $note));
    }

    /**
     * Displays disicpline informations
     *
     * @Route("/notificationlist", name="etudiant_notification_list")
     * 
     */
    public function notificationlistAction() {
        $em = $this->getDoctrine()->getManager();
        $activites = $em->getRepository('AppBundle:Activite')->findAll();
        return $this->render('etudiant/notificationlist.html.twig', array('activites' => $activites));
    }

    /**
     * Displays disicpline informations
     *
     * @Route("/messagelist", name="etudiant_message_list")
     * 
     */
    public function messagelistAction() {



        $em = $this->getDoctrine()->getManager();
        $messages = $em->getRepository('AppBundle:Message')->findByUser($this->getUser()->getId());
        $nouveau_messages = 0;
        foreach ($messages as $key => $value) {
            $nouveau_messages += $value->getNotification();
        }

        return $this->render('etudiant/messagelist.html.twig', array('messages' => $messages, 'nouveau_messages' => $nouveau_messages));
    }

    /**
     * Displays disicpline informations
     *
     * @Route("/messageshow/{id}", name="etudiant_message_show")
     * 
     */
    public function messageshowAction($id) {



        $em = $this->getDoctrine()->getManager();
        $message = $em->getRepository('AppBundle:Message')->findOneBy(array("user" => $this->getUser()->getId(), 'id' => $id));


        // var_dump($message);  die();

        return $this->render('etudiant/message_show.html.twig', array('message' => $message));
    }

    /**
     * Displays module informations
     *
     * @Route("/notification/message", options = { "expose" = true } ,name="etudiant_notification_message")
     *
     * 
     */
    public function NotficationMessageAction() {

        $em = $this->getDoctrine()->getManager();
        $messages = $em->getRepository('AppBundle:Message')->findByUser($this->getUser()->getId());

        foreach ($messages as $key => $value) {
            $value->setNotification(0);
            $em->flush();
        }

        $json_data = array('user' => $this->getUser()->getId());
        return new Response(json_encode($json_data));
    }

    /**
     * Displays module informations
     *
     * @Route("/notification/activite", options = { "expose" = true } ,name="etudiant_notification_activite")
     *
     * 
     */
    public function NotficationActiviteAction() {

        $em = $this->getDoctrine()->getManager();
        $user = $em->getRepository('AppBundle:User')->find($this->getUser()->getId());
        $user->setNotification(0);
        $em->flush();


        $json_data = array('user' => $this->getUser()->getId());
        return new Response(json_encode($json_data));
    }

    /**
     * Displays service informations
     *
     * @Route("/assiduite_absence/", name="etudiant_assiduite")
     * 
     */
    public function assiduiteAction() {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Assiduités", "etudiant_assiduite");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");


        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }


        //  dump($user->getEtudiant()->getId()); die();

        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnnee($user->getEtudiant()->getId());

        //  dump($inscription) ; die();
        $exist_infos = null;
        $ins = array();
        if (empty($inscription)) {
            $exist_infos = "non";
        } else {
            $repository = $this->getDoctrine()->getRepository('AppBundle:TInscription');
            $ins = $repository->findBy(array('id' => $inscription->getId()));
        }





        return $this->render('etudiant/assiduite.html.twig', array('inscription' => $ins, "exist_infos" => $exist_infos));
    }

    /**
     * Displays examen informations
     *
     * @Route("/assiduite/epreuverogramme/{code_annee}/{code_element}/{inscription_id}",name="etudiant_assiduite_epreuveprogramme")
     * 
     */
    public function assiduiteEpreuveProgrammeAction(Request $request, $code_annee, $code_element, $inscription_id) {

        $repository = $this->getDoctrine()->getRepository('AppBundle:PrProgrammation');
        $programmes = $repository->findBy(array('idAnnee' => $code_annee, 'idElement' => $code_element)/* , array('volume' => 'DESC') */);


        // var_dump($programme); die();

        return $this->render('etudiant/assiduite_epreuverogramme.html.twig', array('programmes' => $programmes,
                    'id_inscription' => $inscription_id,
        ));
    }

    /**
     * Displays examen informations
     *
     * @Route("/assiduite/absence2/{pl_emptime_id}/{inscription_id}", options = { "expose" = true } , name="etudiant_assiduite_absence2")
     * 
     */
    public function assiduiteAbsenceAction2(Request $request, $pl_emptime_id, $inscription_id) {

        $repository = $this->getDoctrine()->getRepository('AppBundle:XseanceAbsences');
        $absence = $repository->findOneBy(array('emploi' => $pl_emptime_id, 'inscription' => $inscription_id)/* , array('volume' => 'DESC') */);




        return $this->render('etudiant/assiduite_absence.html.twig', array('absence' => $absence));
    }

    /**
     *
     * @Route("/assiduite/mois/{code_annee}/{code_promotion}/{code_semestre}", name="etudiant_semestre_get_mois")
     * 
     */
    public function ListMoisByCodeSemestreAction($code_annee, $code_promotion, $code_semestre) {

        //      $em = $this->getDoctrine()->getManager();
        //      $data = $em->getRepository('AppBundle:TEtudiant')->GetMoisByCodeSemestreOld($code_annee, $code_promotion, $code_semestre);


//        $em = $this->getDoctrine()->getManager();
//        $data = $em->getRepository('AppBundle:TEtudiant')->GetMoisByCodeSemestre($code_annee, $code_promotion, $code_semestre);


        $sql = "SELECT prog.id_annee idAnnee, prog.id_promotion idPromotion, prog.id_semestre idSemestre,     YEAR(emp.start)  annee ,MONTH(emp.start)  mois  FROM `xseance_absences`   abs inner join pl_emptime emp on emp.id = abs.ID_Seance inner join pr_programmation prog on prog.id = emp.pr_programmation_id
where prog.id_annee = :code_annee and prog.id_promotion = :code_promotion and prog.id_semestre = :code_semestre 
group by prog.id_annee , prog.id_promotion, prog.id_semestre ,YEAR(emp.start) ,MONTH(emp.start)";

        $conn = $this->getDoctrine()->getEntityManager()->getConnection();
        $stmt = $conn->prepare($sql);
        $stmt->bindValue('code_annee', $code_annee);
        $stmt->bindValue('code_promotion', $code_promotion);
        $stmt->bindValue('code_semestre', $code_semestre);
        $stmt->execute();
        $data = $stmt->fetchAll();







      //  dump($data); die();

        foreach ($data as $key => $value) {
           

            $mois = $value['mois'];
            $code_annee = $value['idAnnee'];
            $code_promotion = $value['idPromotion'];
            $code_semestre = $value['idSemestre'];
            setlocale(LC_TIME, "fr_FR", "French");

            switch ($value['mois']) {
                case "1":$data[$key] += array('mois_text' => 'janvier');
                    break;
                case "2":$data[$key] += array('mois_text' => 'février');
                    break;
                case "3":$data[$key] += array('mois_text' => 'mars');
                    break;
                case "4":$data[$key] += array('mois_text' => 'avril');
                    break;
                case "5":$data[$key] += array('mois_text' => 'mai');
                    break;
                case "6":$data[$key] += array('mois_text' => 'juin');
                    break;
                case "7":$data[$key] += array('mois_text' => 'juillet');
                    break;
                case "8":$data[$key] += array('mois_text' => 'aôut');
                    break;
                case "9":$data[$key] += array('mois_text' => 'septembre');
                    break;
                case "10":$data[$key] += array('mois_text' => 'octobre');
                    break;
                case "11":$data[$key] += array('mois_text' => 'novembre');
                    break;
                case "12":$data[$key] += array('mois_text' => 'décembre');
                    break;
            }





//            $semaine = $em->getRepository('AppBundle:TEtudiant')
//                    ->GetSemaine($mois, $code_annee, $code_promotion, $code_semestre);
//
//            foreach ($semaine as $key2 => $value2) {
//                setlocale(LC_TIME, "fr_FR", "French");
//                $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'])->format('Y-m-d')));
//                $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'], 7)->format('Y-m-d')));
//                $text_semaine = 'Semaine : ' . $value2['semaine'] . ' du ' . $date_start . ' à ' . $date_end ; 
//                $semaine[$key2]+= array('text_semaine'=>$text_semaine);
//                
//            }
//
//
//            $data[$key] += array('list_abs' => $semaine);
        }

//        dump($data);
//        die();
        //var_dump($data);
        $list_mois = [];
        $list_semaine_1 = [];
        $list_semaine_2 = [];
        $list_semaine_3 = [];
        $list_semaine_4 = [];
        $list_semaine_5 = [];
        $list_semaine_6 = [];
        $list_semaine_7 = [];
        $list_semaine_8 = [];
        $list_semaine_9 = [];
        $list_semaine_10 = [];
        $list_semaine_11 = [];
        $list_semaine_12 = [];

        setlocale(LC_TIME, "fr_FR", "French");


//        foreach ($data as $key => $value) {
//
//
//            switch ($value['mois']) {
//                case "1":
//                    $list_mois[] = array('mois' => '1', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_1[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//                case "2":
//                    $list_mois[] = array('mois' => '2', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//
//
//
//                    $list_semaine_2[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//                case "3":
//                    $list_mois[] = array('mois' => '3', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_3[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "4":
//                    $list_mois[] = array('mois' => '4', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_4[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "5":
//                    $list_mois[] = array('mois' => '5', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_5[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "6":
//                    $list_mois[] = array('mois' => '6', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_6[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "7":
//                    $list_mois[] = array('mois' => '7', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_7[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "8":
//                    $list_mois[] = array('mois' => '8', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_8[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "9":
//                    $list_mois[] = array('mois' => '9', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_9[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "10":
//                    $list_mois[] = array('mois' => '10', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_10[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "11":
//                    $list_mois[] = array('mois' => '11', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_11[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//
//                case "12":
//                    $list_mois[] = array('mois' => '12', 'annee' => $value['annee']);
//
//                    $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
//                    $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));
//
//                    $list_semaine_12[] = 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' à ' . $date_end;
//                    break;
//            }
//        }
        // var_dump($list_semaine_2);




        return $this->render('etudiant/assiduite_mois_by_semestre.html.twig', array(
                    'mois_annees' => $data,
//                    'list_semaine_1' => $list_semaine_1,
//                    'list_semaine_2' => $list_semaine_2,
//                    'list_semaine_3' => $list_semaine_3,
//                    'list_semaine_4' => $list_semaine_4,
//                    'list_semaine_5' => $list_semaine_5,
//                    'list_semaine_6' => $list_semaine_6,
//                    'list_semaine_7' => $list_semaine_7,
//                    'list_semaine_8' => $list_semaine_8,
//                    'list_semaine_9' => $list_semaine_9,
//                    'list_semaine_10' => $list_semaine_10,
//                    'list_semaine_11' => $list_semaine_11,
//                    'list_semaine_12' => $list_semaine_12,
        ));
    }

    /**
     *
     * @Route("/assiduite/date/{year}/{week}", name="etudiant_date_by_year_and_week")
     * 
     */
    public function GetDateStartAndEndFromYearAndWeekAction($year, $week) {
        setlocale(LC_TIME, "fr_FR", "French");
        $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($year, $week)->format('Y-m-d')));
        $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($year, $week, 7)->format('Y-m-d')));

        return new Response('Semaine : ' . $week . ' du ' . $date_start . ' à ' . $date_end);
    }

    /**
     *
     * @Route("/assiduite/semaine/{code_annee}/{code_promotion}/{code_semestre}", name="etudiant_semestre_get_semaine")
     * 
     */
    public function ListSemaineByCodeSemestreAction($code_annee, $code_promotion, $code_semestre) {

        $em = $this->getDoctrine()->getManager();
        $data = $em->getRepository('AppBundle:TEtudiant')
                ->GetMoisByCodeSemestre($code_annee, $code_promotion, $code_semestre);


        //var_dump($data);
        $list_semaines = [];
        setlocale(LC_TIME, "fr_FR", "French");
        foreach ($data as $key => $value) {


            $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'])->format('Y-m-d')));
            $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value['annee'], $value['semaine'], 7)->format('Y-m-d')));

            $list_semaines[] = array('semaine' => $value['semaine'], 'code_semestre' => $code_semestre, 'code_promotion' => $code_promotion, 'code_annee' => $code_annee, 'data' => 'Semaine : ' . $value['semaine'] . ' du ' . $date_start . ' a ' . $date_end);
        }

        //   array_unique($list_mois, SORT_REGULAR)

        return $this->render('etudiant/assiduite_list_semaine.html.twig', array(
                    'list_semaines' => array_unique($list_semaines, SORT_REGULAR)
        ));
    }

    /**
     * Displays examen informations
     *
     * @Route("/assiduite/absence/{mois}/{code_annee}/{code_promotion}/{code_semestre}", options = { "expose" = true } , name="etudiant_assiduite_absence")
     * 
     */
    public function assiduiteAbsenceAction(Request $request, $mois, $code_annee, $code_promotion, $code_semestre) {
        //  die('here');

        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }

//        $em = $this->getDoctrine()->getManager();
//        $infos = $em->getRepository('AppBundle:TEtudiant')->GetIdAdmissionByIdEtudiant($user->getEtudiant()->getId());





//        $em = $this->getDoctrine()->getManager();
//        $data = $em->getRepository('AppBundle:TEtudiant')
//                ->GetAbscence($mois, $code_annee, $code_promotion, $code_semestre, $infos->getAdmission()->getCode());


        
        
         $sql = "SELECT  abs.ID_Admission idAdmission , abs.Categorie categorie , emp.semaine semaine ,  prog.id_annee , prog.id_promotion, prog.id_semestre ,  YEAR(emp.start)  annee ,MONTH(emp.start)  mois  ,count(abs.Categorie) total
FROM `xseance_absences`   abs inner join pl_emptime emp on emp.id = abs.ID_Seance inner join pr_programmation prog on prog.id = emp.pr_programmation_id
where  emp.annuler <>1 and prog.id_annee = :code_annee and prog.id_promotion = :code_promotion and prog.id_semestre = :code_semestre and abs.ID_Admission = :IdAdmission and MONTH(emp.start)=:mois
group by abs.ID_Admission  , abs.Categorie  , emp.semaine  ,  prog.id_annee , prog.id_promotion, prog.id_semestre ,  YEAR(emp.start)   ,MONTH(emp.start)  
";

        $conn = $this->getDoctrine()->getEntityManager()->getConnection();
        $stmt = $conn->prepare($sql);
        $stmt->bindValue('mois', $mois);
        $stmt->bindValue('code_annee', $code_annee);
        $stmt->bindValue('code_promotion', $code_promotion);
        $stmt->bindValue('code_semestre', $code_semestre);
        $stmt->bindValue('IdAdmission', $user->getUsername());
        
        $stmt->execute();
        $data = $stmt->fetchAll();
        
        
        
        

//        var_dump($dataold); 
 //      var_dump($data); 
 //       die(); 

        $result_array = array();
        foreach ($data as $key2 => $value2) {
            if (!in_array($value2['semaine'], $result_array)) {
                setlocale(LC_TIME, "fr_FR", "French");
                $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'])->format('Y-m-d')));
                $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'], 7)->format('Y-m-d')));
                $text_semaine = 'Semaine : ' . $value2['semaine'] . ' du ' . $date_start . ' a ' . $date_end;
                $result_array[] = array('semaine' => $value2['semaine'], 'text_semaine' => $text_semaine);
            }
        }




        $result_array = array_unique($result_array, SORT_REGULAR);


        $array_detail = array();
        $array_fin = array();
        foreach ($result_array as $key => $value) {

            foreach ($data as $key2 => $value2) {
                if ($value['semaine'] == $value2['semaine']) {
                    $array_detail [] = $value2;
                }
            }

            $array_fin [] = array('key' => $value, 'value' => $array_detail);
            $array_detail = array();
        }


//        dump($array_fin);
//        die();





        return $this->render('etudiant/assiduite_absence.html.twig', array('absences' => $array_fin));
    }

    /**
     * Displays activite informations
     *
     * @Route("/statutnote/{id}", name="etudiant_statut_note")
     * 
     */
    public function StatutNoteAction($id) {



        if (is_numeric($id)) {
            $em = $this->getDoctrine()->getManager();
            $statut = $em->getRepository('AppBundle:PEstatut')->find($id);
        } else {
            $statut = "";
        }

        return $this->render('etudiant/statutNote.html.twig', array('statut' => $statut));
    }

//    /**
//     * Displays service informations
//     *
//     * @Route("/assiduite_note/", name="etudiant_assiduite_note")
//     * 
//     */
//    public function assiduiteNoteAction() {
//
//        $breadcrumbs = $this->get("white_october_breadcrumbs");
//        $breadcrumbs->addRouteItem("Assiduités Note", "etudiant_assiduite");
//        $breadcrumbs->prependRouteItem("Home", "etudiant_index");
//
//
//        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
//            $user = $this->container->get('security.token_storage')->getToken()->getUser();
//        }
//
//
//
//        /* importer les données de la première semaine */
//        $sql_s1 = "
//SELECT  DATE_FORMAT(DateD_S1, '%Y') annee , DATE_FORMAT(DateD_S1, '%m') mois  FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."' 
//UNION
//SELECT DATE_FORMAT(DateD_S2, '%Y') annee ,   DATE_FORMAT(DateD_S2, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//UNION
//SELECT  DATE_FORMAT(DateD_S3, '%Y') annee ,  DATE_FORMAT(DateD_S3, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//UNION
//SELECT DATE_FORMAT(DateD_S4, '%Y') annee ,  DATE_FORMAT(DateD_S4, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//
//order by mois , annee asc";
//        $stmt = $this->getDoctrine()->getEntityManager()->getConnection()->prepare($sql_s1);
//        $stmt->execute();
//        $result = $stmt->fetchAll();
//
//
//        return $this->render('etudiant/assiduite_note.html.twig', array('data' => $result));
//    }
//
//
//    
//    
//    
//    
//  
//    
//     /**
//     * Displays service informations
//     *
//     * @Route("/assiduite_note_details/{mois}/{annee}", options = { "expose" = true } ,  name="etudiant_assiduite_note_details")
//     * 
//     */
//    public function assiduiteNoteDetailsAction($mois,$annee) {
//        
//        
//      
//        $user = $this->container->get('security.token_storage')->getToken()->getUser();
//        
//       
//
//        /* importer les données de la première semaine */
//        $sql_s1 = "
//            
//SELECT tab.* FROM ( 
//SELECT Num_S1 AS semaine, DATE_FORMAT(DateD_S1, '%Y') annee, DATE_FORMAT(DateD_S1, '%m') mois, DateD_S1 AS date_debut, DateF_S1 AS date_fin, Note_S1 AS note, Décision_S1 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S2 AS semaine, DATE_FORMAT(DateD_S2, '%Y') annee, DATE_FORMAT(DateD_S2, '%m') mois, DateD_S2 AS date_debut, DateF_S2 AS date_fin, Note_S2 AS note, Décision_S2 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S3 AS semaine, DATE_FORMAT(DateD_S3, '%Y') annee, DATE_FORMAT(DateD_S3, '%m') mois, DateD_S3 AS date_debut, DateF_S3 AS date_fin, Note_S3 AS note, Décision_S3 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S4 AS semaine, DATE_FORMAT(DateD_S4, '%Y') annee, DATE_FORMAT(DateD_S4, '%m') mois, DateD_S4 AS date_debut, DateF_S4 AS date_fin, Note_S4 AS note, Décision_S4 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' ) tab 
//WHERE annee = '$annee' AND mois = '$mois' ORDER BY annee, mois, semaine ASC
//";
//        
//       
//        $stmt = $this->getDoctrine()->getEntityManager()->getConnection()->prepare($sql_s1);
//        $stmt->execute();
//        $result = $stmt->fetchAll();
//
//
//      // dump($result);
//
//
//
//$result_array= array();
//        foreach ($result as $key2 => $value2) {
//
//            // dump($value2);
//            if (!in_array($value2['semaine'], $result_array)) {
//                setlocale(LC_TIME, "fr_FR", "French");
//                $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'])->format('Y-m-d')));
//               
//               // echo $date_start) ;die(); 
//                $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'], 7)->format('Y-m-d')));
//                $text_semaine = " Semaine : " . $value2['semaine'] . " du " . utf8_encode($date_start) . " a " . utf8_encode($date_end)."";
//                $annee = $value2['annee'];
//                $mois = $value2['mois'];
//                $note= $value2['note'];
//                $decision= $value2['decision'];
//                $result_array[] = array('semaine' => $value2['semaine'], 'text_semaine' => $text_semaine,'mois'=>$mois , 'annee'=>$annee ,'note'=>$note , 'decision'=>$decision);
//            }
//        }
//
//     //  dump($result_array);die();
//
//
//        return $this->render('etudiant/assiduite_note_details.html.twig', array('data' => $result_array));
//    }

    /**
     * Displays service informations
     *
     * @Route("/assiduite_note/", name="etudiant_assiduite_note")
     * 
     */
    public function assiduiteNoteAction() {

        $breadcrumbs = $this->get("white_october_breadcrumbs");
        $breadcrumbs->addRouteItem("Assiduités Note", "etudiant_assiduite");
        $breadcrumbs->prependRouteItem("Home", "etudiant_index");


        if ($this->container->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY')) {
            $user = $this->container->get('security.token_storage')->getToken()->getUser();
        }




        //  dump($user->getEtudiant()->getId()); die();

        $em = $this->getDoctrine()->getManager();
        $inscription = $em->getRepository('AppBundle:TEtudiant')->GetInsCriptionActiveAnnee($user->getEtudiant()->getId());


        if (empty($inscription)) {
            $result = null;
        } else {
            //  dump($inscription->getAnnee()->getCode()) ;die();


            $result = $em->getRepository('AppBundle:XseanceSanction')->findBy(array('idAnnee' => $inscription->getAnnee()->getCode(), 'idAdmission' => $user->getUsername()));

            //  dump ($result); die();



            /* importer les données de la première semaine */
//        $sql_s1 = "
//SELECT  DATE_FORMAT(DateD_S1, '%Y') annee , DATE_FORMAT(DateD_S1, '%m') mois  FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."' 
//UNION
//SELECT DATE_FORMAT(DateD_S2, '%Y') annee ,   DATE_FORMAT(DateD_S2, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//UNION
//SELECT  DATE_FORMAT(DateD_S3, '%Y') annee ,  DATE_FORMAT(DateD_S3, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//UNION
//SELECT DATE_FORMAT(DateD_S4, '%Y') annee ,  DATE_FORMAT(DateD_S4, '%m') mois FROM `xseance_sanction`  where ID_Admission = '".$user->getUsername()."'
//
//order by mois , annee asc";
//        $stmt = $this->getDoctrine()->getEntityManager()->getConnection()->prepare($sql_s1);
//        $stmt->execute();
//        $result = $stmt->fetchAll();
        }

        return $this->render('etudiant/assiduite_note.html.twig', array('data' => $result));
    }

    /**
     * Displays service informations
     *
     * @Route("/assiduite_note_details/{id}", options = { "expose" = true } ,  name="etudiant_assiduite_note_details")
     * 
     */
    public function assiduiteNoteDetailsAction($id) {



        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $em = $this->getDoctrine()->getManager();
        $result = $em->getRepository('AppBundle:XseanceSanction')->find($id);

//dump($result); die();
//        /* importer les données de la première semaine */
//        $sql_s1 = "
//            
//SELECT tab.* FROM ( 
//SELECT Num_S1 AS semaine, DATE_FORMAT(DateD_S1, '%Y') annee, DATE_FORMAT(DateD_S1, '%m') mois, DateD_S1 AS date_debut, DateF_S1 AS date_fin, Note_S1 AS note, Décision_S1 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S2 AS semaine, DATE_FORMAT(DateD_S2, '%Y') annee, DATE_FORMAT(DateD_S2, '%m') mois, DateD_S2 AS date_debut, DateF_S2 AS date_fin, Note_S2 AS note, Décision_S2 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S3 AS semaine, DATE_FORMAT(DateD_S3, '%Y') annee, DATE_FORMAT(DateD_S3, '%m') mois, DateD_S3 AS date_debut, DateF_S3 AS date_fin, Note_S3 AS note, Décision_S3 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' 
//UNION SELECT Num_S4 AS semaine, DATE_FORMAT(DateD_S4, '%Y') annee, DATE_FORMAT(DateD_S4, '%m') mois, DateD_S4 AS date_debut, DateF_S4 AS date_fin, Note_S4 AS note, Décision_S4 AS decision FROM `xseance_sanction` WHERE ID_Admission = '".$user->getUsername()."' ) tab 
//WHERE annee = '$annee' AND mois = '$mois' ORDER BY annee, mois, semaine ASC
//";
//        
//       
//        $stmt = $this->getDoctrine()->getEntityManager()->getConnection()->prepare($sql_s1);
//        $stmt->execute();
//        $result = $stmt->fetchAll();
//
//
//      // dump($result);
//
//
//
//$result_array= array();
//        foreach ($result as $key2 => $value2) {
//
//            // dump($value2);
//            if (!in_array($value2['semaine'], $result_array)) {
//                setlocale(LC_TIME, "fr_FR", "French");
//                $date_start = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'])->format('Y-m-d')));
//               
//               // echo $date_start) ;die(); 
//                $date_end = strftime("%d %B %Y", strtotime((new DateTime())->setISODate($value2['annee'], $value2['semaine'], 7)->format('Y-m-d')));
//                $text_semaine = " Semaine : " . $value2['semaine'] . " du " . utf8_encode($date_start) . " a " . utf8_encode($date_end)."";
//                $annee = $value2['annee'];
//                $mois = $value2['mois'];
//                $note= $value2['note'];
//                $decision= $value2['decision'];
//                $result_array[] = array('semaine' => $value2['semaine'], 'text_semaine' => $text_semaine,'mois'=>$mois , 'annee'=>$annee ,'note'=>$note , 'decision'=>$decision);
//            }
//        }
//
//     //  dump($result_array);die();


        return $this->render('etudiant/assiduite_note_details.html.twig', array('data' => $result));
    }

}
